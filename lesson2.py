a = 21
print(a)
print(bin(a)) # перевод числа в двоичную систему

hex(a) # перевод числа в шестнадцатиричную систему

oct(a) # перевод числа в восмеричную систему

# массивы и циклы
l = [1,2, 'asd', print]

# перебирание списка с помощью for
for al in l:
    print(al)

# перебирание через while
i = 0
 while i < len(l):
    print(l[i])
    i += 1

# тоже перебирание массива
for i in range(4):
    print(i)

# перебор эл-тов и индексов из списка
for i, al in enumerate(0, len(l), 2): # перебор с шагом 2
    print(f'{i}: {al}')

s = 'hello world'
print(s[1]) # элемент строки по индексу
print(s[0:5]) # срез элеметов строки по индексу

# [start:end:step]
print(s[0:5:2]) # срез элеметов строки с шагом

# разворот строки
s = 'hello world'
print(s[::-1]) # строка читается с конца в начало
#2ой способ
for i in range(len(s) - 1, -1, -1): # в range есть три параметра => поэтому три -1
    print(s[i], end=',') #end=',' вывод результата в одной строке и через запятую

#3й способ
print(reversed(s)) # выведется объект, а не строку
# лучше использовать так:
for al in reversed(s)
    print(al)

#разворот списка помимо использования reversed:
s = [1, 2, 3]
s.reverse()
print(s)

# в кортеже список
t = (1, 2, [3, 4])
t[2] += [5, 6] # способ расширения списка через +=
t[2].extend([7, 8]) # также расширение списка
# выдаст ошибку но расширит кортеж

#
l_1 = [1, 2, 'asd', print, 123]
l_2 = [1, 2, 'asd', print, 123]

print(2 in l_1) #  поиск элемента в списке

print(l_1 == l_2) # проверка равенства элементов в списках
print(l_1 is l_2) # проверка равенства списков как объектов (id номеров списков)

# сравнение ???
a = 10
b = 10
print(a is b)


l = [1, 2, 3]
t = (1, 2, 3)

print(l.__sizeof__()) # сколько памяти занимает сисок/ кортеже


# множества:(-список в котором нет повторяющихся эл-тов)

a = {1, 2, 3}

a = set() # объявление пустого множества
a = {} # объявление словаря!!

a = frozenset([1, 2, 3]) # неизменяемое множество(frozen set)



# словари:
d = {
    'name': 'Ivan',
    'age': 25,
    'my_colors': ['blue', 'red', 'green']
}

print(d['name'])
d['city'] = 'Moscow' # добавление ключ + значение
d['name'] = 'Oleg' # изменение значения

del d['age'] # удаление
d.pop('age') # удаление

print(d.keys()) # вывод ключей
print(d.values()) # вывод значений
print(d.items()) # вывод ключ + значение

# Циклы
for el in d.keys(): # перебор ключей
    print(el)

for el in d.values(): # перебор значений
    print(el)

for key, value in d.items(): # перебор ключ + значение
    print(f'Key: {key}, value: {value}')


# обработка ошибок / исключений
try:
    a = 1 / 0
except:
    print('ошибка')


# тернарный оператор
a = 10
b = 20

if a < b:
    c= a-b
else:
    c = a / b

c = a - b if a > b else a / b # упрощение записи цикла




